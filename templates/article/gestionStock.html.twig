{% extends 'base.html.twig' %}

{% block title %}
    Gestion des stocks
{% endblock %}



{% block body %}
    <div id="divGestionStock">
        <div class="my-2">
          <h2 class="text-2xl font-bold text-center text-black-500">Gestion des stocks</h2>
        </div>
        <div id="divInputBoutonsSuggestions" style="text-align: center">
            <input type="text" id="searchArticle" placeholder="Nom de l'article..." autocomplete="off">
            <div id="boutonsAjoutRetrait">

            </div>
            <ul id="suggestionsArticle" style="display: none"></ul>
        </div>
        <div id="messageConfirmation"></div>
    </div>



{% endblock %}

{% block javascripts %}


    <script>
        //Ici on va déterminer un script pour appeler une requête Ajax à chaque fois qu'on a besoin de solliciter la route d'autocomplétion

        //On mets en place une fonction sur le document entier qui ne s'écoute seulement quand le DOM est chargé entièrement
        document.addEventListener('DOMContentLoaded' , function () {
            //On repère la barre de recherche
            const searchArticle = document.getElementById('searchArticle');
            //On repère la div qui proposera les suggestions
            const suggestions = document.getElementById('suggestionsArticle');
            //On repère la div qui contiendra les boutons
            const divBoutons = document.getElementById('boutonsAjoutRetrait');

            //Création de l'input qui servira à entrer les quantités
            const inputQuantite = document.createElement('input');
            inputQuantite.type = 'number';
            inputQuantite.min = '0' ;
            inputQuantite.max = '10000' ;
            inputQuantite.step = '0.01' ;
            inputQuantite.style.borderRadius = '10px';
            inputQuantite.style.width = '4rem' ;




            //Création du bouton Retrait
            const boutonRetrait = document.createElement('button');
            boutonRetrait.textContent = 'Retrait';
            boutonRetrait.classList.add('bg-red-700',
                'hover:bg-red-500',
                'dark:hover:bg-red:700',
                'text-white',
                'font-bold',
                'py-2',
                'px-4',
                'rounded'

            );
            //Mise en place d'un eventListener au clic du bouton
            boutonRetrait.addEventListener('click' , function() {
                const inputQuantiteValue = inputQuantite.value ;
                //On peut récupérer l'id des items fetch grâce dans la fonction des suggestions grâce au dataset
                const idArticle = this.dataset.id ;
                //Définition des headers
                const myHeaders = new Headers();
                myHeaders.append("Content-Type", "application/json");
                //Définition du body
                const raw = JSON.stringify({
                    "valeurInput": inputQuantiteValue,
                    "idArticle" : idArticle
                });
                //Définition des options de la requête
                const requestOptions = {
                    method: "POST",
                    headers: myHeaders,
                    body: raw,
                    redirect: "follow"
                };
                //Si confirmation, on va lancer la requête sur notre route avec les paramètres en options
                if ( confirm("Êtes vous sûr des valeurs que vous avez renseignées ?")) {
                    fetch("/historique_actions_article/createOnRemove", requestOptions)
                        //On envoie une response en text
                        .then((response) => response.json())
                        .then( data => {
                            const messageDiv = document.getElementById('messageConfirmation');
                            if ( data.status === 'success') {
                                messageDiv.textContent = data.message ;
                                messageDiv.className = 'success' ;
                            } else {
                                messageDiv.textContent = data.message ;
                                messageDiv.className = 'error';
                            }
                            messageDiv.style.display = 'block' ;

                            setTimeout(()=>{
                                messageDiv.classList.add('fade-out');

                                setTimeout(()=>{
                                    messageDiv.style.display = 'none';
                                    messageDiv.classList.remove('fade-out');
                                } , 2000 )
                            } , 3000 )
                        })
                        .catch((error) => console.error(error));

                    //Suppression des boutons et de l'input
                    divBoutons.style.display = 'none';
                    boutonRetrait.remove();
                    boutonAjout.remove();
                    inputQuantite.remove();
                }


            })


            //Création du bouton Ajout
            const boutonAjout = document.createElement('button');
            boutonAjout.textContent = 'Ajouter';
            boutonAjout.classList.add('bg-blue-700',
                'hover:bg-blue-500',
                'dark:hover:bg-blue:700',
                'text-white',
                'font-bold',
                'py-2',
                'px-4',
                'rounded',
            );
            //Mise en place d'un event listener sur le bouton, exactement même principe que le bouton Retrait
            boutonAjout.addEventListener('click' , function() {
                const inputQuantiteValue = inputQuantite.value ;
                const idArticle = this.dataset.id ;

                const myHeaders = new Headers();
                myHeaders.append("Content-Type", "application/json");

                const raw = JSON.stringify({
                    "valeurInput": inputQuantiteValue,
                    "idArticle" : idArticle
                });

                const requestOptions = {
                    method: "POST",
                    headers: myHeaders,
                    body: raw,
                    redirect: "follow"
                };

                if ( confirm("Êtes vous sûr des valeurs que vous avez renseignées ?")) {
                    fetch("/historique_actions_article/createOnAdd", requestOptions)
                        .then((response) => response.json())
                        .then( data => {
                            const messageDiv = document.getElementById('messageConfirmation');
                            if ( data.status === 'success') {
                                messageDiv.textContent = data.message ;
                                messageDiv.className = 'success' ;
                            } else {
                                messageDiv.textContent = data.message ;
                                messageDiv.className = 'error';
                            }
                            messageDiv.style.display = 'block' ;

                            setTimeout(()=>{
                                messageDiv.classList.add('fade-out');

                                setTimeout(()=>{
                                    messageDiv.style.display = 'none';
                                    messageDiv.classList.remove('fade-out');
                                } , 2000 )
                            } , 3000 )
                        })
                        .catch((error) => console.error(error));

                    divBoutons.style.display = 'none';
                    boutonRetrait.remove();
                    boutonAjout.remove();
                    inputQuantite.remove();
                }
            })




            //On ajoute un event listener de type input à la barre de recherche
            searchArticle.addEventListener('input', function () {
                //On va chercher ce qui a été écrit dans la barre
                const mot = searchArticle.value;
                //Si le mot est inférieur à 2, le display reste / repasse en none
                if (mot.length < 2) {
                    suggestions.style.display = 'none';
                }

                //Sinon, on va fetch en asynchrone une requête vers la route d'autocomplete définie dans le controller
                //Pour ceci on rajoute en paramètre d'URL le mot écrit dans la barre de recherche
                fetch(`/article/autocomplete?mot=${encodeURIComponent(mot)}`)
                    //On convertit la réponse en JSON
                    .then(response => response.json())
                    //On prépare une fonction anonyme pour traiter les données reçues dans cette réponse
                    .then(data => {
                        //On commence par vider le contenu de suggestions
                        suggestions.innerHTML = '';

                        //Si data contient des données, on affiche la div des suggestions
                        if (data.length > 0) {
                            suggestions.style.display = 'block';
                            //On fait un foreach sur le tableau d'objets qu'on a récupéré
                            data.forEach(item => {
                                //On va créer un <li> pour chacun d'entre eux
                                const li = document.createElement('li');
                                //Leur contenu textuel sera la propriété label de l'objet
                                li.textContent = item.label;
                                //Pour chacun de ces li crées, on ajoute une fonction anonyme au click
                                li.addEventListener('click', () => {
                                    //Cliquer sur une des suggestions va mettre le nom de l'objet en placeholder et enlever la div des suggestions
                                    searchArticle.value = item.label;
                                    divBoutons.style.display = 'flex';
                                    divBoutons.style.justifyContent = 'space-evenly'
                                    //Définition d'un dataset pour pouvoir utiliser les informations hors de la fonction
                                    boutonRetrait.dataset.id = item.id;
                                    boutonAjout.dataset.id = item.id;

                                    divBoutons.appendChild(boutonRetrait);
                                    divBoutons.appendChild(inputQuantite);
                                    divBoutons.appendChild(boutonAjout);
                                    suggestions.style.display = 'none';
                                });
                                //On ajoute l'élément récemment crée à la <li> créée
                                suggestions.appendChild(li);
                            });

                        //Si data ne contient pas de données, c'est dispay 'none'
                        } else {
                            suggestions.style.display = 'none';
                        }
                    });
            });


            //Simple fonction servant à close les suggestions si l'on clique sur la barre de recherche
            document.addEventListener('click', function (event) {
                if (searchArticle.contains(event.target)) {
                    suggestions.style.display = 'none';
                    divBoutons.style.display = 'none';
                    boutonRetrait.remove();
                    boutonAjout.remove();
                    inputQuantite.remove();
                }
            });
        });
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
        #messageConfirmation {
            display: none;
            padding: 10px;
            margin-top: 10px;
            text-align: center;
        }
        #messageConfirmation.success {
            background-color: #d4edda;
            color: #155724;
        }
        #messageConfirmation.error {
            background-color: #f8d7da;
            color: #721c24;
        }
    </style>
{% endblock %}