{% extends 'base.html.twig' %}

{% block title %}Formulaire Consommation Machine
{% endblock %}

{% block stylesheets %}
	<style></style>
{% endblock %}

{% block body %}
	<div class="centered-content">
		<div class="my-2">
			<h2 class="text-2xl font-bold text-center text-black-500">{{ label }}</h2>
		</div>


		<div
			class="max-w-sm mx-auto" id="inputContainer">{# <div class="mb-5">
				            <button id="afficherPhoto" type="button"
				                class="px-3 py-2 text-sm me-2 mb-2 font-medium text-center inline-flex items-center text-white bg-amber-800 rounded-lg hover:bg-blue-800 dark:bg-slate-500 dark:hover:bg-slate-700 ">
				                <svg xmlns="http://www.w3.org/2000/svg" style="width: 40px ; height: 30px" viewBox="0 0 512 512">
				                    <path
				                        d="M149.1 64.8L138.7 96H64C28.7 96 0 124.7 0 160V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H373.3L362.9 64.8C356.4 45.2 338.1 32 317.4 32H194.6c-20.7 0-39 13.2-45.5 32.8zM256 192a96 96 0 1 1 0 192 96 96 0 1 1 0-192z" />
				                </svg>
				            </button>
				            <button id="masquerPhoto" style="display: none" type="button"
				                class="px-3 py-2 text-sm me-2 mb-2 font-medium text-center inline-flex items-center text-white bg-amber-800 rounded-lg hover:bg-blue-800 dark:bg-slate-500 dark:hover:bg-slate-700 ">
				                <svg xmlns="http://www.w3.org/2000/svg" style="width: 40px ; height: 30px; " viewBox="0 0 640 512">
				                    <path
				                        d="M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c8.4-19.3 10.6-41.4 4.8-63.3c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zM373 389.9c-16.4 6.5-34.3 10.1-53 10.1c-79.5 0-144-64.5-144-144c0-6.9 .5-13.6 1.4-20.2L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5L373 389.9z" />
				                </svg>
				            </button>
				
				            <div id="divPhotoBon"></div>
				            <div id="divUpload2"></div>
				        </div> #}


		</div>
		<button onclick="addLine()" class="mt-5 bg-gray-500 text-white py-2 px-4 rounded">Ajouter une ligne</button>
		<button onclick="sendData()" class="bg-blue-500 text-white py-2 px-4 rounded">Envoyer</button>

	</div>
	<!-- <dialog id="modalConfirmationPhoto" style="display: none"></dialog> -->

{% endblock %}

{% block javascripts %}
	<script src="{{ asset('scripts/CameraClass.js') }}"></script>
	<script src="{{ asset('scripts/Autocomplete.js') }}"></script>

	<script>
		let counter = 0;
const items = [];

function addLine(url = '/article/production/autocomplete') {
const div = document.getElementById('inputContainer');
const newDiv = document.createElement("div");
newDiv.className = "mb-5 relative";

// Generate unique IDs
const textId = `searchInput${counter}`;
const numberId1 = `numberInput1${counter}`;
const numberId2 = `numberInput2${counter}`;
counter++;

newDiv.innerHTML = `
                <div class="flex gap-5">
                    <div class="flex flex-col w-1/2">
                        <label for="${textId}" class="whitespace-nowrap">Article</label>
                        <div class="relative w-full">
                            <input type="text" name="${textId}" id="${textId}" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-black-600 sm:text-sm sm:leading-6">
                            <ul id="suggestion${textId}" class="list-none p-2 border border-gray-300 rounded-lg max-h-48 overflow-y-auto absolute top-full left-0 bg-white w-full hidden z-10"></ul>
                        </div>
                    </div>
                    <div class="flex flex-col w-36">
                        <label for="${numberId1}" class="whitespace-nowrap">Nombre de palettes</label>
                        <input type="number" name="${numberId1}" id="${numberId1}" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-black-600 sm:text-sm sm:leading-6">
                    </div>
                    <div class="flex flex-col w-24">
                        <label for="${numberId2}" class="whitespace-nowrap">Unité</label>
                        <input type="number" name="${numberId2}" id="${numberId2}" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-black-600 sm:text-sm sm:leading-6">
                    </div>
                </div>
            `;
div.appendChild(newDiv);

// Store values in variables when inputs change
const textInput = newDiv.querySelector (`#${textId}`);
const numberInput1 = newDiv.querySelector (`#${numberId1}`);
const numberInput2 = newDiv.querySelector (`#${numberId2}`);
const suggestion = newDiv.querySelector (`#suggestion${textId}`);

const autoC = new Autocomplete(textInput, suggestion, url, "palette");
}

function verifyItems() {
const div = document.getElementById('inputContainer');
const lines = div.querySelectorAll('.mb-5');
let allValid = true;

lines.forEach((line, index) => {
const textInput = line.querySelector('input[type="text"]');
const numberInput1 = line.querySelector('input[id^="numberInput1"]');
const numberInput2 = line.querySelector('input[id^="numberInput2"]');
const isSelected = textInput.dataset.selected === 'true';

if (! textInput.value || ! numberInput1.value || ! numberInput2.value || ! isSelected) {
const number = index + 1
const str = number == 1 ? "La première ligne" : `La ${number}ème ligne`
alert (`${str} est incorrecte. Veuillez remplir correctement toutes les cases`);
allValid = false;
}
});

return allValid;
}

function collectValues() {
if (! verifyItems()) {
return; // Stop if any line is incomplete
}

const div = document.getElementById('inputContainer');
const lines = div.querySelectorAll('.mb-5');

items.length = 0; // Clear the array

lines.forEach(line => {
const textInput = line.querySelector('input[type="text"]');
const numberInput1 = line.querySelector('input[id^="numberInput1"]');
const numberInput2 = line.querySelector('input[id^="numberInput2"]');

items.push({idArticle: textInput.dataset.idArticle, nbrPalettes: numberInput1.value, unite: numberInput2.value});
});

}

async function sendData() {
collectValues()
const myHeaders = new Headers();
myHeaders.append("Content-Type", "application/json");
const raw = JSON.stringify(items);

const requestOptions = {
method: "POST",
headers: myHeaders,
body: raw,
redirect: "follow"
};

const response = await fetch("/prefabloc/palettisation", requestOptions)
const json = await response.json();

if (json.status == "success") {
alert('Les données ont bien été envoyé')
window.location.href = "/prefabloc/palettisation"
} else {
alert("Erreur lors de l'envoie")
}
}
	</script>
{% endblock %}
